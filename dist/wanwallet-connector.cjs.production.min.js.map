{"version":3,"file":"wanwallet-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react-wan/types'\nimport { AbstractConnector } from '@web3-react-wan/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { WanWalletSubprovider } from '@wanswap/subproviders/lib/src/subproviders/wanwallet' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface WanWalletConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n}\n\nexport class WanWalletConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n  }: WanWalletConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(new WanWalletSubprovider())\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.on('disconnect', this.handleDisconnect)\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  private handleDisconnect(): void {\n    this.deactivate()\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n\n  public async close() {\n    this.provider.stop()\n    this.deactivate()\n  }\n}\n"],"names":["chainId","url","pollingInterval","requestTimeoutMs","_this","supportedChainIds","_proto","activate","this","provider","engine","Web3ProviderEngine","addProvider","WanWalletSubprovider","CacheSubprovider","RPCSubprovider","on","handleDisconnect","start","deactivate","getProvider","getChainId","getAccount","_providers","getAccountsAsync","then","accounts","stop","close","AbstractConnector"],"mappings":"+0OAsBE,oBACEA,IAAAA,QACAC,IAAAA,IACAC,IAAAA,gBACAC,IAAAA,iBAOwC,OALxCC,cAAM,CAAEC,kBAAmB,CAACL,YAEvBA,QAAUA,EACfI,EAAKH,IAAMA,EACXG,EAAKF,gBAAkBA,EACvBE,EAAKD,iBAAmBA,oFACzB,kBAyCA,OAzCAG,EAEYC,oBAAQ,kBAAd,aAAA,MAAA,6BAAA,OAAA,sBAAA,OAWgB,OAVhBC,KAAKC,YACFC,EAAS,IAAIC,EAAmB,CAAET,gBAAiBM,KAAKN,mBACvDU,YAAY,IAAIC,wBACvBH,EAAOE,YAAY,IAAIE,GACvBJ,EAAOE,YAAY,IAAIG,iBAAeP,KAAKP,IAAKO,KAAKL,mBACrDK,KAAKC,SAAWC,GAGlBF,KAAKC,SAASO,GAAG,aAAcR,KAAKS,kBAEpCT,KAAKC,SAASS,0BAEP,CAAET,SAAUD,KAAKC,SAAUT,QAASQ,KAAKR,UAAS,OAAA,UAAA,+BAC1D,OAAA,WAAA,mCAAAM,EAEOW,iBAAA,WACNT,KAAKW,cACNb,EAEYc,uBAAW,kBAAjB,aAAA,6BAAA,OAAA,sBAAA,OAAA,yBACEZ,KAAKC,UAAQ,OAAA,UAAA,+BACrB,OAAA,WAAA,mCAAAH,EAEYe,sBAAU,kBAAhB,aAAA,6BAAA,OAAA,sBAAA,OAAA,yBACEb,KAAKR,SAAO,OAAA,UAAA,+BACpB,OAAA,WAAA,mCAAAM,EAEYgB,sBAAU,kBAAhB,aAAA,6BAAA,OAAA,sBAAA,OAAA,yBACEd,KAAKC,SAASc,WAAW,GAAGC,iBAAiB,GAAGC,MAAK,SAACC,GAAkB,OAAaA,EAAS,OAAG,OAAA,UAAA,+BACzG,OAAA,WAAA,mCAAApB,EAEMa,WAAA,WACLX,KAAKC,SAASkB,QACfrB,EAEYsB,iBAAK,kBAAX,aAAA,6BAAA,OAAA,sBAAA,OACLpB,KAAKC,SAASkB,OACdnB,KAAKW,aAAY,OAAA,UAAA,+BAClB,OAAA,WAAA,sCA7DqCU"}